=TSV=

'''Version:''' 0.1

'''Author:''' Bryce Campbell

'''Copyright:''' 2022

'''Description:''' A Library that can read and write <abbr title="tab separated value">TSV</abbr> files.

==Notes==

This library has been tested on macOS 12 with Swift 5.6, 
but <strong>should</strong> work on other platforms.

This library was made because I was contemplating 
adding another supported format to an app I made, 
and would help in the event that I want to make 
other apps that support TSV.

===Version History===

<dl>
<dt style="font-weight:bold">0.1</dt>
<dd>
<p>Initial release.</p>
</dd>
</dl>

===Limits===

At this time, this library can only be used to parse or create TSV files. 
It cannot and was never intended to be used to actually edit data in a TSV, 
such as add rows or columns.

However, values in each field can be adjusted.

===Usage===

To make use of this library, 
add the package to your repository via Swift Package Manager like this:

<pre>
dependencies: [
    // Dependencies declare other packages that this package depends on.
    // .package(url: /* package url */, from: "1.0.0"),
    .package(url: "https://github.com/bryceac/TSV", branch: "main")
]
</pre>

This adds the current state of the library to your project, 
though it is best to use a tagged version.

Make sure it is included as a dependency in your main target.

After that, you just need to do something like this to read a TSV file:

<pre>
import Foundation
import TSV

let DOCUMENTS_DIRECTORY = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
let TEST_FILE = DOCUMENTS_DIRECTORY.appendingPathComponent("table").appendingPathExtension("tsv")

if let tsv = try? TSV.load(from: TEST_FILE, withHeaders: true) {
    print(tsv.columnHeadings)
    for row in tsv.sheet {
        print(row)
    }
}
</pre>

This will print out the column headers and the rows within.

Thanks to an underlying library, 
you can also investigate columns individually by either specifying a column index like this:

<pre>
print(tsv[column: 0]
</pre>

or, if you declared headers were present, like in the example above:

<pre>
print(tsv[column: "Date"]
</pre>

You can also grab rows, excluding the column headers, by doing this:

<pre>
tsv[0]
</pre>

However, the TSV object is not iterable, so if you want to iterate over all 
the rows, it is best to do want you saw in the initial example, as the 
<strong>sheet</strong> property exposes the underlying 2D array.

Values can also be grabbed individually from the TSV like this:

<pre>
tsv[0,0]
</pre>

Thanks to the library used in this library, 
this index does the same thing as if you did the following:

<pre>
sheet[0][0]
</pre>

====Saving Data====

Unlike reading a TSV, where you have to deckare if a TSV has headers, 
saving a TSV is as simple as this:

<pre>
let DOCUMENTS_DIRECTORY = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
let TEST_FILE = DOCUMENTS_DIRECTORY.appendingPathComponent("table").appendingPathExtension("tsv")

try? tsv.save(to: TEST_FILE)
</pre>

This will save the file in the Documents directory.

===Contributing===

If you would like to help make this project even better, feel free 
to create a fork and issue a pull request.

All code will be licensed under the same license as this project.

===Support===

If you have any problems, I will try my best to help you. 

Send an email to the following address to ask for help:

tonyhawk2100@gmail.com

===Project Used===

This library makes use of the following project:

<dl>
<dt style="font-weight:bold"><a href="https://github.com/bryceac/Matrix">Matrix</a></dt>
<dd>
<p>A custom library I made when I 
wanted to make my own Sudoku puzzle generator.</p>
<p>This library is used to house TSV data 
and simplify the work 
that would have been 
required to allow column and value retrieval.</p>
</dd>
</dl>